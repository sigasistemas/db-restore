<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('restore_columns', function (Blueprint $table) {
            if (config('db-restore.incrementing', false)) {
                $table->id();
                $table->unsignedBigInteger('user_id')->nullable();
                $table->unsignedBigInteger('tenant_id')->nullable();
                $table->unsignedBigInteger('relation_id')->nullable(); 
            } else {
                $table->ulid('id')->primary();
                $table->ulid('user_id')->nullable();
                $table->ulid('tenant_id')->nullable();
                $table->ulid('relation_id')->nullable(); 
            }
            $table->string('column_from', 255)->nullable()->comment('Nome da coluna de origem da restauração');
            $table->string('column_to', 255)->nullable()->comment('Nome da coluna de destino da restauração');
            $table->string('default_value', 255)->nullable()->comment('Valor padrão da coluna');
            $table->string('type', 255)->nullable()->comment('Tipo da coluna');
            if (config('db-restore.incrementing', false)) {
                $table->morphs('columnable');
            } else {
                $table->ulidMorphs('columnable');
            }
            $table->enum('status', ['draft', 'published'])->default('published')->comment('Status da restauração');
            $table->text('description')->nullable()->comment('Descrição da restauração');
            $table->timestamps();
            $table->softDeletes();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('restore_columns');
    }
};
